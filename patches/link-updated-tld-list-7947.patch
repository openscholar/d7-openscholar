diff --git a/link.module b/link.module
index b70c5c6..dd9b99d 100644
--- a/link.module
+++ b/link.module
@@ -10,7 +10,13 @@ define('LINK_INTERNAL', 'internal');
 define('LINK_FRONT', 'front');
 define('LINK_EMAIL', 'email');
 define('LINK_NEWS', 'news');
-define('LINK_DOMAINS', 'aero|arpa|asia|biz|com|cat|coop|edu|gov|info|int|jobs|mil|museum|name|nato|net|org|pro|travel|mobi|local');
+define('LINK_DOMAINS', 'aero|arpa|asia|biz|build|com|cat|ceo|coop|edu|gov|info|int|jobs|mil|museum|name|nato|net|org|post|pro|tel|travel|mobi|local|localhost');
+
+define('LINK_IANA_DOMAINS', 'link_iana_domains');
+define('LINK_TLD_SOURCE_URL', 'https://data.iana.org/TLD/tlds-alpha-by-domain.txt');
+define('LINK_VAR_NEXT_TLD_LIST_UPDATE', 'link_next_TLD_list_update');
+define('LINK_TLD_LIST_UPDATE_PERIODICITY', '+1 day');
+define('LINK_TLD_LIST_UPDATE_PERIODICITY_ON_FAILURE', '+6 hour');
 
 define('LINK_TARGET_DEFAULT', 'default');
 define('LINK_TARGET_NEW_WINDOW', '_blank');
@@ -946,7 +952,7 @@ function link_cleanup_url($url, $protocol = "http") {
     $protocol_match = preg_match("/^([a-z0-9][a-z0-9\.\-_]*:\/\/)/i", $url);
     if (empty($protocol_match)) {
       // But should there be? Add an automatic http:// if it starts with a domain name.
-      $domain_match = preg_match('/^(([a-z0-9]([a-z0-9\-_]*\.)+)('. LINK_DOMAINS .'|[a-z]{2}))/i', $url);
+      $domain_match = preg_match('/^(([a-z0-9]([a-z0-9\-_]*\.)+)('. _link_domains() .'|[a-z]{2}))/i', $url);
       if (!empty($domain_match)) {
         $url = $protocol ."://". $url;
       }
@@ -1030,7 +1036,7 @@ function link_validate_url($text) {
   // Starting a parenthesis group with (?: means that it is grouped, but is not captured
   $protocol = '((?:'. implode("|", $allowed_protocols) .'):\/\/)';
   $authentication = "(?:(?:(?:[\w\.\-\+!$&'\(\)*\+,;=" . $LINK_ICHARS . "]|%[0-9a-f]{2})+(?::(?:[\w". $LINK_ICHARS ."\.\-\+%!$&'\(\)*\+,;=]|%[0-9a-f]{2})*)?)?@)";
-  $domain = '(?:(?:[a-z0-9' . $LINK_ICHARS_DOMAIN . ']([a-z0-9'. $LINK_ICHARS_DOMAIN . '\-_\[\]])*)(\.(([a-z0-9' . $LINK_ICHARS_DOMAIN . '\-_\[\]])+\.)*('. LINK_DOMAINS .'|[a-z]{2}))?)';
+  $domain = '(?:(?:[a-z0-9' . $LINK_ICHARS_DOMAIN . ']([a-z0-9'. $LINK_ICHARS_DOMAIN . '\-_\[\]])*)(\.(([a-z0-9' . $LINK_ICHARS_DOMAIN . '\-_\[\]])+\.)*('. _link_domains() .'|[a-z]{2}))?)';
   $ipv4 = '(?:[0-9]{1,3}(\.[0-9]{1,3}){3})';
   $ipv6 = '(?:[0-9a-fA-F]{1,4}(\:[0-9a-fA-F]{1,4}){7})';
   $port = '(?::([0-9]{1,5}))';
@@ -1175,3 +1181,55 @@ function link_field_item_property_info() {
   );
   return $properties;
 }
+
+/**
+ * Returns pipe separated string of valid domain suffixes.
+ */
+function _link_domains() {
+  $link_iana_domains = variable_get('link_iana_domains', '');
+  return empty($link_iana_domains) ? LINK_DOMAINS : $link_iana_domains;
+}
+
+/**
+ * Implements hook_cron_queue_info().
+ */
+function link_cron_queue_info() {
+  $queues = array();
+  if (time() >= variable_get(LINK_VAR_NEXT_TLD_LIST_UPDATE, 0)) {
+    $queues['link_iana'] = array(
+      'worker callback' => 'link_cron_worker_callback',
+    );
+  }
+  return $queues;
+}
+
+/**
+ * Implements hook_cron()
+ */
+function link_cron() {
+  $items = array('');
+  $queue = DrupalQueue::get('link_iana');
+  foreach ($items as $item) {
+    $queue->createItem($item);
+  }
+}
+
+/**
+ * Worker Callback for the link cron queue. Sets the 'link_iana_domains' variable
+ * with the current list of valid Top-Level-Domains (TLDs) from the official IANA list.
+ */
+function link_cron_worker_callback($item) {
+  $tld_text = drupal_http_request(LINK_TLD_SOURCE_URL);
+   if (isset($tld_text->error)) {
+    watchdog('link', 'Failed to get the file from url: %url with error: %error', array('%url' => LINK_TLD_SOURCE_URL, '%error' => $tld_text->error), WATCHDOG_ERROR);
+    variable_set(LINK_VAR_NEXT_TLD_LIST_UPDATE, strtotime(LINK_TLD_LIST_UPDATE_PERIODICITY_ON_FAILURE));
+    return FALSE;
+  }
+  else {
+    if (preg_match_all('/^(?<tld>[-A-Z0-9]{2,})$/simx', $tld_text->data, $matches)) {
+      variable_set(LINK_IANA_DOMAINS, strtolower(implode('|', $matches[0])));
+      variable_set(LINK_VAR_NEXT_TLD_LIST_UPDATE, strtotime(LINK_TLD_LIST_UPDATE_PERIODICITY));
+      return FALSE;
+    }
+  }
+}
\ No newline at end of file
