<?php
//Define a starting point for custom mlids
define('VSITE_MENU_CUSTOM_MLID', 1000);

/**
 * Return the os_menu tree for this vsite
 *
 * @return array Tree, or false on failure
 */
function vsite_menu_os_menu_tree($menu_key){
  $vsite = spaces_get_space();

  if ($vsite && isset($vsite->controllers->menus)) {
    return $vsite->controllers->menus->get_menu_tree($menu_key);
  }

  return false;
}

/**
 * Delete a menu from the vsite via the menu controller
 *
 * @param string $menu_key
 */
function vsite_menu_del($menu_key){
  $vsite = spaces_get_space();

  $current_menus = os_get_menus();
  //Remove the menu from the variable
  unset($current_menus[$menu_key]);

  if ($vsite && isset($vsite->controllers->menus)) {
    $vsite->controllers->menus->del($menu_key);

    //Set the active menus
    return $vsite->controllers->variable->set('os_menus', $current_menus);
  }

  return false;
}

/**
 * Add a new menu to the vsite via the menu controller
 *
 * @param string $menu_key
 */
function vsite_menu_add($title, $menu_key){
  $vsite = spaces_get_space();

  $current_menus = os_get_menus();
  $current_menus[$menu_key] = $title;

  if ($vsite && isset($vsite->controllers->menus)) {
    $vsite->controllers->menus->set($menu_key,array());

    //Set the active menus
    $vsite->controllers->variable->set('os_menus', $current_menus);
  }

  return false;
}

/**
 * Revert the OS menu(s) back to defaults
 *
 * @param $menu_name (optional)
 */
function vsite_menu_revert($menu_name = false){

  $vsite = spaces_get_space();

  $current_menus = os_get_menus();

  if ($vsite && isset($vsite->controllers->menus)) {
    if($menu_name){
      //Reset this one menu
      $vsite->controllers->menus->del($menu_name);
    }else{
      foreach ($current_menus as $menu_key => $title){
        $vsite->controllers->menus->del($menu_key);
      }
      //Reset the active menus
      $vsite->controllers->variable->del('os_menus');
    }

    return true;
  }

  return false;
}

/**
 * Implements hook_menu_overview_form_alter().
 */
function vsite_menu_form_os_menu_overview_form_alter(&$form, &$form_state, $form_id){
  include_once drupal_get_path('module', 'vsite_menu') . '/vsite_menu.admin.inc';

  //Use the vsite submit handler which will either take over or call 'menu_overview_form_submit'
  $key = array_search('menu_overview_form_submit', $form['#submit']);
  if (isset($form['#submit'][$key]))
    $form['#submit'][$key] = 'vsite_menu_menu_overview_form_submit';
}

/**
 * Saves a menu link.
 *
 * @param $item
 * An associative array representing a menu link item, with elements:
 * - link_path: (required) The path of the menu item, which should be
 * normalized first by calling drupal_get_normal_path() on it.
 * - link_title: (required) Title to appear in menu for the link.
 * - menu_name: (optional) The machine name of the menu for the link.
 * Defaults to 'navigation'.
 * - weight: (optional) Integer to determine position in menu. Default is 0.
 * - expanded: (optional) Boolean that determines if the item is expanded.
 * - options: (optional) An array of options, see l() for more.
 * - mlid: (optional) Menu link identifier, the primary integer key for each
 * menu link. Can be set to an existing value, or to 0 or NULL
 * to insert a new link.
 * - plid: (optional) The mlid of the parent.
 * - router_path: (optional) The path of the relevant router item.
 *
 * @return
 * The mlid of the saved menu link, or FALSE if the menu link could not be saved.
 */
function vsite_menu_menu_link_save(&$item, $gid = FALSE) {
  drupal_alter('menu_link', $item);
  ctools_include('menu', 'os');
  $vsite = vsite_get_vsite($gid);
  if (!$vsite) {
    return FALSE;
  }

  if (list($menu, $existing_menu) = _vsite_menu_prepare_menu_item($item, $vsite)) {
    $vsite->controllers->menus->set($menu, $existing_menu);

    /**
     * Now clear the cached menu tree for this vsite.
     */
    vsite_menu_cache_clear($menu, $vsite->id);
  }

  return $item['mlid'];
}

/**
 * Helper function for preparing the new menu object.
 */
function _vsite_menu_prepare_menu_item(&$item, $vsite) {
  $default_menu = key(os_get_menus());

  // This is the easiest way to handle the unique internal path '<front>',
  // since a path marked as external does not need to match a router path.
  $item['external'] = !isset($item['external'])? ((url_is_external($item['link_path']) || $item['link_path'] == '<front>') ? 1 : 0) : $item['external'];
  // Load os defaults.
  $item += array(
    'menu_name' => $default_menu,
    'weight' => 0,
    'link_title' => '',
    'hidden' => 0,
    'has_children' => 0,
    'expanded' => 0,
    'options' => array(),
    'module' => 'menu',
    'customized' => 0,
    'updated' => 0
  );

  $menu = $item['menu_name'];

  //Retrieve the existing menu data
  $existing_menu = _vsite_menu_get_menu_links($menu, $vsite);

  if (isset($item['mlid']) && array_key_exists($item['mlid'], $existing_menu)) {
    $existing_item = $existing_menu[$item['mlid']];
  }
  else {
    $existing_item = FALSE;
    if (! isset($item['mlid'])) {
      //Increment to get a new mlid for this menu
      $item['mlid'] = _vsite_menu_get_mlid();
    }
  }

  // Try to find a parent link. If found, assign it and derive its menu.
  $parent = _vsite_menu_link_find_parent($item, $existing_menu);
  if (! empty($parent['mlid'])) {
    $item['plid'] = $parent['mlid'];
    $item['menu_name'] = $parent['menu_name'];
  }
  // If no corresponding parent link was found, move the link to the top-level.
  else {
    $item['plid'] = 0;
  }

  // Directly fill parents for top-level links.
  if ($item['plid'] == 0) {
    $item['p1'] = $item['mlid'];
    for($i = 2; $i <= MENU_MAX_DEPTH; $i ++) {
      $item["p$i"] = 0;
    }
    $item['depth'] = 1;
  }
  // Otherwise, fill parents based on the parent link.
  else {
    $item['depth'] = $parent['depth'] + 1;
    _menu_link_parents_set($item, $parent);
  }

  // Find the router_path.
  if (empty($item['router_path']) || ! $existing_item || ($existing_item['link_path'] != $item['link_path'])) {
    if ($item['external']) {
      $item['router_path'] = '';
    }
    else {
      // Find the router path which will serve this path.
      $item['parts'] = explode('/', $item['link_path'], MENU_MAX_PARTS);
      $item['router_path'] = _menu_find_router_path($item['link_path']);
    }
  }

  // If every value in $existing_item is the same in the $item, there is no
  // reason to clear the caches. We use
  // array_intersect_assoc() with the $item as the first parameter because
  // $item may have additional keys left over from building a router entry.
  // The intersect removes the extra keys, allowing a meaningful comparison.
  if (!$existing_item || (array_intersect_assoc($item, $existing_item)) != $existing_item) {

    $menu_links_schema = drupal_get_schema('menu_links');

    //Clean up the Item for saving, removing anything that isn't in drupals DB
    $existing_menu[$item['mlid']] = array_intersect_key($item, $menu_links_schema['fields']);

    //Check the has_children status of the parent.
    if ($item['plid'] && $item['hidden'] == 0) {
      $existing_menu[$item['plid']]['has_children'] = 1;
    }

    //Update the has_children of the old parent if the parent has changed
    if ($existing_item && $existing_item['plid'] && $item['plid'] != $existing_item['plid']) {
      $old_parent = _vsite_menu_link_find_parent($existing_item, $existing_menu);

      $remaining_children = _vsite_menu_link_find_children($old_parent, $existing_menu);
      $existing_menu[$existing_item['plid']]['has_children'] = count($remaining_children)?1:0;
    }

    // Fixing the menu depths. In some cases when dragging the menu under
    // another menu and that menu is a parent menu then the depth of the child
    // and the father will be same. This will cause the menu tree to break.
    _vsite_menu_prepare_menu_item_fix_depth($existing_menu, $item);

    return array($menu, $existing_menu);
  }
}

/**
 * Fixing depth of parent menu child and father.
 *
 * @param $items
 *   The elements in the menu tree.
 * @param $menu_item
 *   A father menu item.
 */
function _vsite_menu_prepare_menu_item_fix_depth(&$items, $menu_item) {
  foreach ($items as $item) {
    if (($item['plid'] == $menu_item['mlid']) && $items[$item['mlid']]['depth'] == $items[$menu_item['mlid']]['depth']) {
      $items[$item['mlid']]['depth']++;

      // Recurse the function but in this case the child item is the father
      // item.
      _vsite_menu_prepare_menu_item_fix_depth($items, $items[$item['mlid']]);
    }
  }
}

/**
 * Clears the cached data for a single named menu in a vsite.
 *
 * If called more than once a shutdown function will be registered.
 */
function vsite_menu_cache_clear($menu_name, $gid) {
  $cache_cleared = &drupal_static(__FUNCTION__, array());

  if (empty($cache_cleared[$menu_name])) {
    cache_clear_all('links:' . $menu_name . ':space:'. $gid .":", 'cache_menu', TRUE);
    $cache_cleared[$menu_name] = 1;
  }
  elseif ($cache_cleared[$menu_name] == 1) {
    drupal_register_shutdown_function('cache_clear_all', 'links:' . $menu_name . ':space:'. $gid .":", 'cache_menu', TRUE);
    $cache_cleared[$menu_name] = 2;
  }

  // Also clear the menu system static caches.
  menu_reset_static_cache();
}

/**
 * Returns a menu_link that has been translated and has the access set, and is ready for display
 *
 * @param number $mlid
 *  The menu link identifier
 * @param string $menu
 *  The menu identifier
 */
function vsite_menu_menu_link_load($mlid, $menu = ''){

  $vsite = spaces_get_space();
  if (! $vsite)
    return false;

  if ($menu) {
    $menu_links = _vsite_menu_get_menu_links($menu);
  }
  else {
    $menu_links = array();
    foreach (os_get_menus() as $m => $name) {
      $menu_links += _vsite_menu_get_menu_links($m);
    }
  }

  if(isset($menu_links[$mlid])){
    $item = $menu_links[$mlid];

    // May not return data if it is an external link
    $router_info = $vsite->controllers->menus->get_router_data($item['router_path']);

    if (is_array($router_info)){
      $item = array_merge($router_info, $item);
    }

    _menu_link_translate($item);

    //Return the Full Menu Link
    return $item;
  }

  return false;
}

/**
 * Returns a mlid given a link path or false if it does not exist
 *
 * @param $menu
 * @param $path
 */
function vsite_menu_get_link_path($menu, $path){
  $menu_links = _vsite_menu_get_menu_links($menu);

  foreach ($menu_links as $mlid => $link) {
    if($link['link_path'] == $path && $link['mlid']){
      return $link['mlid'];
    }
  }
}

/**
 * Deletes a single menu link, in a vsite
 *
 * @param string $menu
 *   A valid menu identifier
 * @param int $mlid
 *   A valid menu link mlid
 */
function vsite_menu_delete_menu_link($menu, $mlid){
  $refresh_menu = false;
  $vsite = spaces_get_space();
  if (! $vsite){
    return false;
  }

  //Retrieve the existing menu data
  $existing_menu = _vsite_menu_get_menu_links($menu);

  if (array_key_exists($mlid,$existing_menu)) {
    $item = $existing_menu[$mlid];
    // Children get re-attached to the item's parent.
    if ($item['has_children']) {

      // Try to find a parent link. If found, assign it and derive its menu.
      $children = _vsite_menu_link_find_children($item, $existing_menu);
      foreach ($children as $child) {
        $child['plid'] = $item['plid'];
        vsite_menu_menu_link_save($child);
        $refresh_menu = true;
      }
    }

    //If we have made changes to the menu re-load it
    if($refresh_menu){
      $existing_menu = _vsite_menu_get_menu_links($menu);
    }

    //Delete this menu item
    unset($existing_menu[$mlid]);

    // Try to find a parent link. If found, update it's child status.
    $parent = _vsite_menu_link_find_parent($item, $existing_menu);
    if($parent){
      $remaining_children = _vsite_menu_link_find_children($parent, $existing_menu);
      $existing_menu[$parent['mlid']]['has_children'] = count($remaining_children)?1:0;
    }

    //Save the Menu to Overrides
    $vsite->controllers->menus->set($menu, $existing_menu);

    /**
     * Now clear the cached menu tree for this vsite.
     */
    vsite_menu_cache_clear($menu, $vsite->id);
  }
}

/**
 * Find a possible parent for a given menu link.
 *
 * Because the parent of a given link might not exist anymore,
 * we apply a set of heuristics to determine a proper parent
 *
 * @param $menu_link
 * A menu link.
 * @param $parent_candidates
 * An array of menu links keyed by mlid.
 * @return
 * A menu link structure of the possible parent or FALSE if no valid parent
 * has been found.
 */
function _vsite_menu_link_find_parent($menu_link, $parent_candidates = array()){
  $parent = FALSE;

  // This item is explicitely top-level, skip the rest of the parenting.
  if (isset($menu_link['plid']) && empty($menu_link['plid'])) {
    return $parent;
  }

  // If we have a parent link ID, try to use that.
  $candidates = array();
  if (isset($menu_link['plid'])) {
    $candidates[] = $menu_link['plid'];
  }

  // Else, if we have a link hierarchy try to find a valid parent in there.
  if (! empty($menu_link['depth']) && $menu_link['depth'] > 1) {
    for($depth = $menu_link['depth'] - 1; $depth >= 1; $depth --) {
      $candidates[] = $menu_link['p' . $depth];
    }
  }

  foreach ( $candidates as $mlid ) {
    if (isset($parent_candidates[$mlid])) {
      return $parent_candidates[$mlid];
    }
  }

  return $parent;
}

/**
 * Find possible children for a given menu link.
 *
 * @param $menu_link
 *   A menu link.
 * @param $child_candidates
 *   An array of menu links keyed by mlid.
 * @return
 *   An array of menu links or empty array if no valid child
 *   has been found.
 */
function _vsite_menu_link_find_children($menu_link, $child_candidates = array()){
  $children = array();

  // This item does not have childeren, skip the rest of the searching.
  if (isset($menu_link['has_children']) && !$menu_link['has_children']) {
    return $children;
  }

  foreach ( $child_candidates as $mlid => $child ) {
    // If we have a parent link ID, try to use that.
    if (isset($child['plid']) && $child['plid'] == $menu_link['mlid']) {
      $children[$mlid] = $child;
    }
  }

  return $children;
}

/**
 * Helper function to get an array of menu links from the controller or drupal, used by crud functions
 */
function _vsite_menu_get_menu_links($menu, $vsite = FALSE) {
  if (!$vsite) {
    $vsite = spaces_get_space();
  }

  if ($vsite) {
    //Retrieve the menu data from the controller
    $existing_menu = $vsite->controllers->menus->get($menu);
  }

  //If there is no menu override avalible get the default links from the menu_link table
  if (!isset($existing_menu) || !is_array($existing_menu)) {
    $menu_links = menu_load_links($menu);
    $existing_menu = array();
    foreach ($menu_links as $link){
      $existing_menu[$link['mlid']] = $link;
    }
  }

  return $existing_menu;
}

/**
 * Controller Plugin Hooks
 */

/**
 * Implements hook_spaces_plugins().
 */
function vsite_menu_spaces_plugins(){
  $plugins = array();
  $plugins['spaces_controller_menus'] = array(
      'handler' => array(
          'path' => drupal_get_path('module', 'vsite_menu') . '/plugins',
          'file' => 'spaces_controller_menus.inc',
          'class' => 'spaces_controller_menus',
          'parent' => 'spaces_controler'
      )
  );
  return $plugins;
}

/**
 * Implements hook_spaces_registry().
 */
function vsite_menu_spaces_registry(){
  return array(
      'controllers' => array(
          'menus' => array(
              'title' => t('Menus'),
              'plugin' => 'spaces_controller_menus'
          )
      )
  );
}

/**
 * Helper function to get a unique MLID per vsite
 */
function _vsite_menu_get_mlid(){

  $mlid = variable_get('vsite_menu_mlid_increment',VSITE_MENU_CUSTOM_MLID);

  // Increment the mlid site-wide, this only needs to
  // be distinct per menu, but no need to keep the var for each site
  variable_set('vsite_menu_mlid_increment',($mlid + 1));

  return $mlid;
}

/**
 * Helper function to sort by weight
 */
function _vsite_menu_sort_weight($a, $b){
  $weight_a = $a['weight'] ? $a['weight'] : 0;
  $weight_b = $b['weight'] ? $b['weight'] : 0;
  return $weight_a - $weight_b;
}

/**
 * Implements hook_form_alter().
 *
 * Alter the cp form to add Reset to Default and Save to Preset controls
 */
function vsite_menu_form_cp_menu_build_form_alter(&$form, &$form_state, $form_id){
  // For administrators, let them save to either the space or the preset
  if (($vsite = spaces_get_space()) && user_access('administer spaces')) {

    if (! empty($form['#submit'])) {
      $position = array_search('cp_menu_submit_form', $form['#submit'], TRUE);
      if ($position !== FALSE) {
        // Add our submit handler to the cp_layout settings forms
        $form['#submit'][$position] = 'vsite_menu_cp_menu_form_submit';

        if ($preset = $vsite->controllers->variable->get('spaces_preset_' . $vsite->type)) {
          $preset = spaces_preset_load($preset, $vsite->type);
          $form['actions']['preset'] = array(
              '#type' => 'submit',
              '#value' => t('Save to @title', array(
                  '@title' => $preset->title
              ))
          );
          $form['actions']['reset'] = array(
              '#type' => 'submit',
              '#value' => t('Reset to defaults')
          );
          $form['actions']['submit']['#value'] = t('Save for !name', array(
              '!name' => $vsite->title()
          ));
        }
      }
    }
  }
}

/**
 * Form submit handler for menu settings form.
 * Similar to cp_menu_submit_form() but provides revert and save to preset.
 */
function vsite_menu_cp_menu_form_submit($form, &$form_state) {
  if ($space = spaces_get_space()) {
    $op = isset($form_state['values']['op']) ? $form_state['values']['op'] : '';

    if ($preset = $space->controllers->variable->get('spaces_preset_' . $space->type)) {
      $preset = spaces_preset_load($preset, $space->type);
    }

    //Reset, Save to preset, or call standard submit handler
    switch ($op){
      case t('Reset to defaults'):
        if(os_menu_revert()){
          drupal_set_message(t('The menus have been reset to their default values.'));
        }
        break;
      case t('Save to @title', array('@title' => $preset->title)):
        //Standard Submit, run the default submit handler to save context data before saving to preset
        cp_menu_submit_form($form, $form_state);

        if($preset){

          //Loop through all menus
          foreach (os_get_menus() as $menu_name => $title){
            $override = $space->controllers->menus->get($menu_name);
            if($override){
              $preset->value['menus'][$menu_name] = $override;
            }
          }

          //Set the default Menus
          $preset->value['variable']['os_menus'] = os_get_menus();

          drupal_set_message(t('The layout settings have been saved to %title.', array('%title' => $preset->title)));
          spaces_preset_save($preset);
        }
        break;
      default:
        //Standard Submit, run the default submit handler
        cp_menu_submit_form($form, $form_state);
        break;
    }
  }
}

/**
 * Implements hook_preprocess_block().
 * Add a custom CSS class to custom menus.
 */
function vsite_menu_preprocess_block(&$vars) {
  // Include the menus.
  ctools_include('menu','os');
  // Get the current OS menus.
  $os_menus = os_get_menus();

  // We don't want to add any CSS to primary and secondary menus.
  $exclude_menus = array(
    'primary-menu' => 'Primary Menu',
    'secondary-menu' => 'Secondary Menu',
  );

  // Diff the keys and the results should be the custom menus.
  $custom_menus = array_diff_key($os_menus, $exclude_menus);

  // Add the class 'os-custom-menu' to the matching custom menu blocks.
  foreach ($custom_menus as $key => $value) {
    if(isset($vars['block']) && is_object($vars['block']) && $vars['block']->delta == $key ) {
      $vars['classes_array'][] = 'os-custom-menu';
    }
  }
}

/**
 * Simple API function wrapper to add a new menu item to a vsite's menu.
 */
function vsite_menu_create_menu_link($title, $path, $gid, $plid = FALSE, $options = array()) {
  // Adds the parameters into the correct array format.
  $options['link_title'] = $title;
  $options['link_path'] = $path;
  if ($plid !== FALSE) {
    $options['plid'] = $plid;
  }

  // Adds default settings.
  $defaults = array(
    'menu_name' => 'primary-menu',
  );
  $options += $defaults;

  $mlid = vsite_menu_menu_link_save($options, $gid);
  return $mlid;
}

/**
 * Adds a menu item for a node in the primary menu.
 */
function vsite_menu_add_node($nid, $gid, $title = '') {
  if (empty($title)) {
    $node = node_load($nid);
    $title = $node->title;
  }
  // Note: the final menu item will use any available path alias.
  $path = "node/$nid";
  $mlid = vsite_menu_create_menu_link($title, $path, $gid);
  return $mlid;
}
