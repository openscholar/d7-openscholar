<?php
// $Id$

/**
 * Applies a set of blocks as reactions in a vsite's context
 *
 * @param string $context_name
 * @param array $blocks
 *
 * @see os_layout_set()
 */
function vsite_layout_context_set($context_name, $blocks, $vsite = FALSE) {

  if (!$vsite) {
    $vsite = spaces_get_space();
  }

  if ($vsite && isset($vsite->controllers->context)) {
    $vsite->controllers->context->set($context_name . ":reaction:block", array(
        'blocks' => $blocks,
      ));
    return TRUE;
  }

  return FALSE;
}

/**
 * Reverts an individual context back to defaults
 *
 * @param string $context
 *
 * @return boolean Success
 */
function vsite_layout_context_revert($context) {
  $vsite = spaces_get_space();

  if ($vsite && isset($vsite->controllers->context)) {
    $vsite->controllers->context->del($context . ":reaction:block");
    return TRUE;
  }

  return FALSE;
}

/**
 * Implements hook_form_alter().
 *
 * Adds "Reset to Default" and "Save to Preset" controls to the cp layout form.
 */
function vsite_layout_form_cp_layout_full_form_alter(&$form, &$form_state, $form_id) {
  // For administrators, let them save to either the space or the preset
  if (($vsite = spaces_get_space()) && user_access('administer spaces')) {

    if (!empty($form['#submit'])) {
      $position = array_search('cp_layout_full_submit', $form['#submit'], TRUE);
      if ($position !== FALSE) {
        // Add our submit handler to the cp_layout settings forms
        $form['#submit'][$position] = 'vsite_layout_cp_layout_form_submit';

        if ($preset = $vsite->controllers->variable->get('spaces_preset_' . $vsite->type)) {
          $preset = spaces_preset_load($preset, $vsite->type);
          $form['actions']['preset'] = array(
            '#type' => 'submit',
            '#value' => t('Save to @title', array(
                '@title' => $preset->title,
              )),
          );
          $form['actions']['reset'] = array(
            '#type' => 'submit',
            '#value' => t('Reset to defaults'),
          );
          $form['actions']['submit']['#value'] = t('Save for !name', array(
              '!name' => $vsite->title(),
            ));
        }
      }
    }
  }
}

/**
 * Form submit handler for layout settings form.
 * Similar to cp_layout_full_submit() but provides revert and save to preset.
 */
function vsite_layout_cp_layout_form_submit($form, &$form_state) {
  if ($space = spaces_get_space()) {
    $op = isset($form_state['values']['op']) ? $form_state['values']['op'] : '';

    if ($preset = $space->controllers->variable->get('spaces_preset_' . $space->type)) {
      $preset = spaces_preset_load($preset, $space->type);
    }

    // Reset, Save to preset, or call standard submit handler
    switch ($op) {
      case t('Reset to defaults'):
        foreach ($form_state['values']['context'] as $context){
          os_layout_revert($context);
        }
        if (count($form_state['values']['context'])) {
          drupal_set_message(t('This layout has been reset to its default values.'));
        }
        break;

      case t('Save to @title', array('@title' => $preset->title)):
        //Standard Submit, run the default submit handler to save context data before saving to preset
        cp_layout_full_submit($form, $form_state);

        if ($preset) {
          // Loop through all the contexts
          foreach (os_layout_get_contexts(array(0, 1, 2)) as $context => $name) {
            $preset->value['context'][$context . ":reaction:block"] = array(
              'blocks' => os_layout_get($context),
            );
          }

          drupal_set_message(t('The layout settings have been saved to %title.', array('%title' => $preset->title)));
          spaces_preset_save($preset);
        }
        break;

      default:
        // Standard Submit, run the default submit handler
        cp_layout_full_submit($form, $form_state);
        break;
    }
  }
}


/**
 * Implements hook_os_layout_set_alter
 *
 * Used to trigger re-build of the block relationships when a layout changes.
 *
 * @param array $blocks
 * @param string $context_name
 */
function vsite_layout_os_layout_set_alter(&$blocks, $context_name) {

  // Check if a rebuild of the block relationships is needed.
  if(variable_get('vsite_layout_rebuild_block_contexts', TRUE)) {
    vsite_layout_rebuild_block_contexts();
  }

  $vsite = vsite_get_vsite();
  if ($vsite) {
    // Delete the old block relationships.
    db_delete('vsite_layout_block')->condition('sid', $vsite->id)->condition('context', $context_name)->execute();

    foreach ($blocks as $block) {
      //skip blocks that are not in the context.
      if(!$block['region']) continue;

      $block['sid'] = $vsite->id;
      $block['context'] = $context_name;
      drupal_write_record('vsite_layout_block', $block);
    }
  }
}

/**
 * Get a list of the contexts a block is in.
 */
function vsite_layout_get_block_contexts($module, $delta, $vsite = FALSE) {

  // Check if a rebuild of the block relationships is needed.
  if(variable_get('vsite_layout_rebuild_block_contexts', TRUE)) {
    vsite_layout_rebuild_block_contexts($vsite);
  }

  if (!$vsite) {
    $vsite = vsite_get_vsite();

    // If we don't have a vsite bail out here.
    if(!$vsite) return FALSE;
  }

  $query = db_select('vsite_layout_block', 'vlb');
  $query->condition('sid', $vsite->id);
  $query->condition('module', $module);
  $query->condition('delta', $delta);
  $query->fields('vlb', array('module','delta','context','region','weight'));

  return $query->execute()->fetchAll();
}

/**
 * Rebuild the block_context relationships
 */
function vsite_layout_rebuild_block_contexts($vsite = FALSE) {

  if (!$vsite) {
    $vsite = vsite_get_vsite();

    // If we don't have a vsite bail out here.
    if(!$vsite) return FALSE;
  }

  // Delete the existing block relationships.
  db_delete('vsite_layout_block')->condition('sid', $vsite->id)->execute();

  //Get all contexts.
  $contexts = os_layout_get_contexts(TRUE, TRUE);

  foreach ($contexts as $context_id => $title) {
    $blocks = os_layout_get($context_id);
    foreach ($blocks as $block) {
      //skip blocks that are not in the context.
      if(!$block['region']) continue;

      $block['sid'] = $vsite->id;
      $block['context'] = $context_id;
      drupal_write_record('vsite_layout_block', $block);
    }
  }

  $vsite->controllers->variable->set('vsite_layout_rebuild_block_contexts', FALSE);
}

/**
 * Implements hook os_layout_contexts().
 *
 * @param $privacy boolean (optional)
 * Privacy conditions to honor
 *
 * @return
 *  Avalible contexts with thier descriptions.
 */
function vsite_layout_os_layout_contexts($privacy = TRUE, $dynamic = FALSE) {
  if(!$dynamic) return array();

  $provided_contexts = &drupal_static(__FUNCTION__, array());

  // Static cache of avalible contexts.
  if (count($provided_contexts)) {
    return $provided_contexts;
  }

  $vsite = vsite_get_vsite();

  // If we don't have a vsite bail out here.
  if(!$vsite) return FALSE;

  //Default Contexts
  $contexts = array_map(function($a) { return $a.":reaction:block"; }, array_keys(os_layout_get_contexts(TRUE)));

  $query = db_select('spaces_overrides', 'so');
  $query->condition('id', $vsite->id);
  $query->condition('type', 'og');
  $query->condition('object_type', 'context');
  $query->condition('object_id', '%_:reaction:block', 'LIKE');
  $query->condition('object_id', $contexts, 'NOT IN');
  $query->fields('so',array('object_id'));
  $result = $query->execute()->fetchCol();

  foreach ($result as $object_id) {
  	list($context_id,) = explode(":",$object_id);

  	// Loop through Node based contexts.
  	foreach (array('os_pages-page-' => 'Page:', 'os_books-book-' => 'Book:') as $context_prefix => $title_prefix) {
  	  if (strpos($context_id, $context_prefix) === 0){
        $nid = str_replace($context_prefix, '', $context_id);
        $node = node_load($nid);
        if ($node) {
         $provided_contexts[$context_id] = $title_prefix . " " . $node->title;
        }
        continue 2;
      }
  	}

  	if (strpos($context_id, 'os_taxonomy-vocab-') === 0) {
  	  // Handle Vocabulary Contexts
  	  $vid = str_replace('os_taxonomy-vocab-', '', $context_id);
      $vocab = taxonomy_vocabulary_load($vid);
      if ($vocab) {
       $provided_contexts[$context_id] = "Vocabulary: " . $vocab->title;
      }
  	} elseif (strpos($context_id, 'os_taxonomy-term-') === 0) {
  	  // Handle Term Contexts
  	  $tid = str_replace('os_taxonomy-term-', '', $context_id);
      $term = taxonomy_term_load($tid);
      if ($term) {
       $provided_contexts[$context_id] = "Term: " . $term->title;
      }
  	}
  }

  return $provided_contexts;
}
