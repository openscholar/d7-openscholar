<?php

/**
 * @file
 * A text field that has Key & Value fields.
 */

/**
 * Implements hook_menu().
 */
function dyntextfield_menu() {
  $items = array(
    'dyntextfield/autocomplete' => array(
      'title' => 'Dynamic Keys Lookup',
      'page callback' => 'dyntextfield_autocomplete',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    ),
  );

  return $items;
}

/**
 * Implements hook_field_info().
 */
function dyntextfield_field_info() {
  return array(
    'dyntextfield' => array(
      'label' => t('Dynamic Text Field(s)'),
      'description' => t('Store key/value pairs in the database.'),
      'default_widget' => 'dyntextfield_widget',
      'default_formatter' => 'dyntextfield_default',
    ),
  );
}

/**
 * Custom validation of settings values.
 *
 * Create callbacks like this to do settings validation.
 */
function _dyntextfield_length_validate($element, &$form_state) {
  $value = $form_state['values']['max_length'];
  if ($value && !is_numeric($value) || $value < 1 || $value > 255) {
    form_set_error('max_length', t('"Max length" must be a number between 1 and 255.'));
  }
}

/**
 * Implements hook_field_is_empty().
 */
function dyntextfield_field_is_empty($item, $field) {
  if (!empty($item['dyntext_fieldset'])) {
    return empty($item['dyntext_fieldset']['label']);
  }
  return empty($item['value']);
}

/**
 * Autocomeplete callback; Return matching labels.
 *
 * @param $field_name
 *   The field name to query by.
 * @param $text
 *   The text entered by the user.
 */
function dyntextfield_autocomplete($field_name, $text) {
  $matches = array();

  $field = field_info_field($field_name);

  if (strpos($field['type'], 'dyntextfield') !== 0) {
    // Illegal field.
    return MENU_NOT_FOUND;
  }

  $table_name = _field_sql_storage_tablename($field);
  $column_name = $field_name . '_label';

  $result = db_select($table_name, 'f')->fields('f', array($column_name))->condition($column_name, '%' . db_like($text) . '%', 'LIKE')->orderBy($column_name)->execute();

  foreach ($result as $row) {
    $matches[$row->$column_name] = check_plain($row->$column_name);
  }

  drupal_json_output($matches);
}

/**
 * Implementation of hook_field_formatter_info().
 */
function dyntextfield_field_formatter_info() {
  return array(
    'dyntextfield_default' => array(
      'label' => t('Dynamic text default'),
      'field types' => array('dyntextfield'),
    ),
    'dyntextfield_plain' => array(
      'label' => t('Dynamic text plain text'),
      'field types' => array('dyntextfield'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function dyntextfield_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  switch ($display['type']) {
    case 'dyntextfield_default':
      foreach ($items as $delta => $item) {
        // Don't include label/value who have whitespaces only in the field.
        if(trim($item['label']) == false && trim($item['value']) == false) continue;
        $element[$delta] = array('#markup' => '<span class="dyntext_label field-label">' . check_plain(trim($item['label'])) . ':</span>&nbsp;<span class="dyntext_value">' . check_plain(trim($item['value'])) . '</span>');
      }
      break;

    case 'dyntextfield_plain':
      foreach ($items as $item) {
        // Don't include label/value who have whitespaces only in the field.
        if(trim($item['label']) == true && trim($item['value']) == true) continue;
        $element[$delta] = array('#markup' => check_plain(trim($item['label']) . ': ' . trim($item['value'])));
      }
      break;
  }
  return $element;
}

/**
 * Theme function to wrap fields as table.
 */
function theme_dyntextfield_form_table(&$form) {

  $content = '<table><tr>';
  foreach ($form as $key => $value) {
    if (substr($key, 0, 1) == '#') {
      continue;
    }
    $content .= '<td>' . drupal_render($form[$key]) . '</td>';
  }
  $content .= '</tr></table>';

  return $content;
}

/**
 * Implements hook_field_widget_info().
 */
function dyntextfield_field_widget_info() {
  return array(
    'dyntextfield_widget' => array(
      'label' => t('Dynamic Textfield Widget'),
      'field types' => array('dyntextfield'),
    ),
    'dyntextfield_textareawidget' => array(
      'label' => t('Dynamic TextArea Widget'),
      'field types' => array('dyntextfield'),
    ),
  );
}

/**
 * Implements hook_field_settings_form().
 */
function dyntextfield_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  $settings += array('size' => 60);

  $form = array();
  $form['size'] = array(
    '#type' => 'textfield',
    '#title' => t('Size of textfield'),
    '#default_value' => $settings['size'],
    '#element_validate' => array('element_validate_integer_positive'),
    '#required' => TRUE,
  );
  return $form;
}

/**
 * Implements hook_field_widget_form().
 */
function dyntextfield_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // TODO: Remove.
  $instance['widget']['settings']['size'] = !empty($instance['widget']['settings']['size']) ? $instance['widget']['settings']['size'] : 60;

  $element['label'] = array(
    '#title' => t('Key'),
    '#type' => 'textfield',
    '#default_value' => isset($items[$delta]['label']) ? $items[$delta]['label'] : NULL,
    '#autocomplete_path' => 'dyntextfield/autocomplete/' . $field['field_name'],
    '#size' => $instance['widget']['settings']['size'],
    '#maxlength' => 255,
  );

  $element['value'] = array(
    '#title' => t('Value'),
    '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
    '#size' => $instance['widget']['settings']['size'],
    '#maxlength' => $instance['widget']['type'] == 'textfield' ? 255 : NULL,
    '#type' => 'textfield',
  );

  // Add css for the widget itmes.
  $form['#attached']['css'][] = drupal_get_path('module', 'dyntextfield') . '/css/dyntextfield.css';

  $element['value']['#type'] = $instance['widget']['type'] == 'textfield' ? 'textarea' : 'textfield';
  return $element;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dyntextfield_form_biblio_node_form_alter(&$form, $form_state) {

  // this next bit is to remove all the dyntextfield form elements when
  // pub type is not selected on a biblio form
  if (!isset($form_state['values']['biblio_type']) &&
    empty($form_state['post']['biblio_type']) &&
    empty($form_state['submitted']) &&
    empty($form['vid']['#value'])
  ) {

    foreach (element_children($form) as $form_element) {
      $widgets = element_children($form[$form_element]);
      if (count($widgets) && is_array($form[$form_element][current($widgets)]) && array_key_exists('dyntext_fieldset', $form[$form_element][current($widgets)])) {
        $form[$form_element] = NULL;
      }
    }
  }
  return $form;
}

/**
 * Provide an interface for exporting our fields to bibtex
 *
 * @param $pub object publication
 * @param $bibtex string
 */
function dyntextfield_biblio_bibtex_export_post($pub, &$bibtex) {

  $node = node_load($pub->nid);
  $result = db_query("SELECT field_name  FROM `content_node_field_instance` WHERE `type_name` = '%s' AND `widget_type` = 'dyntextfield_widget' ", $pub->type);

  $i = 0;
  // @todo use field api to access (and set) these values.
  while ($field_info = db_fetch_array($result)) {
    $field_name = $field_info['field_name'];

    // Adds these fields to the biblio export
    if (isset($node->$field_name) && is_array($node->$field_name)) {
      foreach ($node->$field_name as $field) {
        if (strlen($field['value'])) {
          $bibtex .= _bibtex_format_entry('biblio_extra' . ++$i, "{$field['label']}: {$field['value']}");
        }
      }
    }
  }
}

/**
 * Provide an interface for impoting our fields to the biblio type
 *
 * @param $entry array settings
 * @param $node array
 */
function dyntextfield_biblio_bibtex_import($entry, &$node) {

  $query = db_query("SELECT field_name  FROM `content_node_field_instance` WHERE `type_name` = 'biblio' AND `widget_type` = 'dyntextfield_widget' ");
  $result = db_fetch_array($query);

  $i = 0;
  if ($result) {
    $field_name = $result['field_name'];
    $node[$field_name] = array();
    while (array_key_exists("biblio_extra" . ++$i, $entry)) {
      list($key, $value) = split(":", $entry["biblio_extra" . $i], 2);
      if (!strlen(trim($value))) {
        $value = $key;
      }
      $node[$field_name][] = array('dyntext_fieldset' => array('label' => trim($key), 'value' => trim($value)));
    }
  }
}

